{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"get_started/","title":"DipCoin Python SDK","text":"<p>DipCoin Python SDK is a powerful and easy-to-use library for interacting with the DipCoin Protocol on the Sui blockchain. This SDK provides a comprehensive set of tools for managing liquidity pools, performing swaps, and interacting with the DipCoin ecosystem.</p>"},{"location":"get_started/#features","title":"Features","text":"<ul> <li>\ud83d\udd04 Liquidity Pool Management</li> <li>Add liquidity to pools</li> <li>Remove liquidity from pools</li> <li>Query pool information</li> <li>\ud83d\udcb1 Token Swaps</li> <li>Exact input swaps</li> <li>Exact output swaps</li> <li>\ud83d\udd0d Pool Discovery</li> <li>Find pool IDs for token pairs</li> <li>Query pool details and statistics</li> </ul>"},{"location":"get_started/#installation","title":"Installation","text":"<pre><code>pip install dipcoin\n</code></pre>"},{"location":"get_started/#quick-start","title":"Quick Start","text":"<p>Here's a simple example of how to use the DipCoin SDK:</p> <pre><code>from dipcoin import DipcoinClient\n\nasync def main():\n    # Initialize the client (defaults to testnet)\n    client = DipcoinClient()\n\n    # Get pool information\n    pool = await client.get_pool(\"your_pool_id\")\n\n    # Add liquidity to a pool\n    result = await client.add_liquidity(\n        pool_id=\"your_pool_id\",\n        coin_x_type=\"0x2::sui::SUI\",\n        coin_y_type=\"0x2::usdc::USDC\",\n        coin_x_amount=1000000000,  # 1 SUI\n        coin_y_amount=1000000,     # 1 USDC\n        slippage=0.005             # 0.5% slippage\n    )\n\n    # Perform a swap\n    swap_result = await client.swap_exact_in(\n        pool_id=\"your_pool_id\",\n        coin_in_type=\"0x2::sui::SUI\",\n        coin_out_type=\"0x2::usdc::USDC\",\n        amount_in=1000000000,      # 1 SUI\n        slippage=0.005             # 0.5% slippage\n    )\n\n# Run the async function\nimport asyncio\nasyncio.run(main())\n</code></pre>"},{"location":"get_started/#documentation","title":"Documentation","text":"<ul> <li>Tutorials - Step-by-step guides for common use cases</li> <li>API Reference - Detailed documentation of all available methods and classes</li> </ul>"},{"location":"get_started/#support","title":"Support","text":"<p>For support, please join our community or open an issue on GitHub.</p>"},{"location":"reference/","title":"API Reference","text":"<p>This document provides detailed information about all available classes and methods in the DipCoin SDK.</p>"},{"location":"reference/#dipcoinclient","title":"DipcoinClient","text":"<p>The main client class for interacting with the DipCoin Protocol.</p> <pre><code>from dipcoin import DipcoinClient\n</code></pre>"},{"location":"reference/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, network: str = \"testnet\")\n</code></pre> <p>A client for interacting with the DipCoin Protocol on Sui blockchain.</p> <p>This client provides methods to interact with DipCoin's liquidity pools, including adding/removing liquidity and performing swaps.</p> <p>Attributes: - <code>network</code> (str): The network to connect to (e.g., \"testnet\", \"mainnet\") - <code>client</code> (AsyncGqlClient): The Sui GraphQL client instance</p>"},{"location":"reference/#methods","title":"Methods","text":""},{"location":"reference/#get_pool","title":"get_pool","text":"<pre><code>async def get_pool(self, pool_id: str) -&gt; Pool | None\n</code></pre> <p>Retrieve information about a specific liquidity pool.</p> <p>Parameters: - <code>pool_id</code> (str): The unique identifier of the pool to query.</p> <p>Returns: - <code>Pool | None</code>: A Pool object containing the pool's information if found,                 None if the pool doesn't exist.</p> <p>Raises: - <code>Exception</code>: If there's an error parsing the pool data or an unknown error occurs.</p>"},{"location":"reference/#get_pool_id","title":"get_pool_id","text":"<pre><code>async def get_pool_id(self, coin_x_type: str, coin_y_type: str) -&gt; str | None\n</code></pre> <p>Get the pool ID for a given pair of tokens.</p> <p>Parameters: - <code>coin_x_type</code> (str): The type of the first token in the pair. - <code>coin_y_type</code> (str): The type of the second token in the pair.</p> <p>Returns: - <code>str | None</code>: The pool ID if found, None if no pool exists for the given pair.</p>"},{"location":"reference/#add_liquidity","title":"add_liquidity","text":"<pre><code>async def add_liquidity(\n    self,\n    pool_id: str,\n    coin_x_type: str,\n    coin_y_type: str,\n    coin_x_amount: int,\n    coin_y_amount: int,\n    slippage: float = DEFAULT_SLIPPAGE,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Add liquidity to a pool.</p> <p>This method allows users to provide liquidity to a pool by depositing both tokens in the pair. The amounts are automatically adjusted to maintain the pool's price ratio.</p> <p>Parameters: - <code>pool_id</code> (str): The ID of the pool to add liquidity to. - <code>coin_x_type</code> (str): The type of the first token. - <code>coin_y_type</code> (str): The type of the second token. - <code>coin_x_amount</code> (int): The amount of the first token to deposit. - <code>coin_y_amount</code> (int): The amount of the second token to deposit. - <code>slippage</code> (float, optional): The maximum acceptable slippage in percentage.                               Defaults to DEFAULT_SLIPPAGE (0.5%).</p> <p>Returns: - <code>Dict[str, Any]</code>: A dictionary containing:     - <code>tx_id</code> (str): The transaction ID if successful, empty string if failed     - <code>status</code> (bool): True if the transaction was successful, False otherwise     - <code>error</code> (str, optional): Error message if the transaction failed</p> <p>Raises: - <code>ValueError</code>: If amounts are invalid or slippage is out of range</p>"},{"location":"reference/#remove_liquidity","title":"remove_liquidity","text":"<pre><code>async def remove_liquidity(\n    self,\n    pool_id: str,\n    coin_x_type: str,\n    coin_y_type: str,\n    lp_amount: int,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Remove liquidity from a pool.</p> <p>Parameters: - <code>pool_id</code> (str): The ID of the pool to remove liquidity from. - <code>coin_x_type</code> (str): The type of the first token. - <code>coin_y_type</code> (str): The type of the second token. - <code>lp_amount</code> (int): The amount of LP tokens to burn.</p> <p>Returns: - <code>Dict[str, Any]</code>: A dictionary containing:     - <code>tx_id</code> (str): The transaction ID if successful, empty string if failed     - <code>status</code> (bool): True if the transaction was successful, False otherwise     - <code>error</code> (str, optional): Error message if the transaction failed</p>"},{"location":"reference/#swap_exact_in","title":"swap_exact_in","text":"<pre><code>async def swap_exact_in(\n    self,\n    pool_id: str,\n    coin_in_type: str,\n    coin_out_type: str,\n    amount_in: int,\n    slippage: float = DEFAULT_SLIPPAGE,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Perform a swap with exact input amount.</p> <p>Parameters: - <code>pool_id</code> (str): The ID of the pool to perform the swap in. - <code>coin_in_type</code> (str): The type of the input token. - <code>coin_out_type</code> (str): The type of the output token. - <code>amount_in</code> (int): The exact amount of input tokens to spend. - <code>slippage</code> (float, optional): The maximum acceptable slippage in percentage.                               Defaults to DEFAULT_SLIPPAGE (0.5%).</p> <p>Returns: - <code>Dict[str, Any]</code>: A dictionary containing:     - <code>tx_id</code> (str): The transaction ID if successful, empty string if failed     - <code>status</code> (bool): True if the transaction was successful, False otherwise     - <code>error</code> (str, optional): Error message if the transaction failed</p>"},{"location":"reference/#swap_exact_out","title":"swap_exact_out","text":"<pre><code>async def swap_exact_out(\n    self,\n    pool_id: str,\n    coin_in_type: str,\n    coin_out_type: str,\n    amount_out: int,\n    slippage: float = DEFAULT_SLIPPAGE,\n) -&gt; Dict[str, Any]\n</code></pre> <p>Perform a swap with exact output amount.</p> <p>Parameters: - <code>pool_id</code> (str): The ID of the pool to perform the swap in. - <code>coin_in_type</code> (str): The type of the input token. - <code>coin_out_type</code> (str): The type of the output token. - <code>amount_out</code> (int): The exact amount of output tokens to receive. - <code>slippage</code> (float, optional): The maximum acceptable slippage in percentage.                               Defaults to DEFAULT_SLIPPAGE (0.5%).</p> <p>Returns: - <code>Dict[str, Any]</code>: A dictionary containing:     - <code>tx_id</code> (str): The transaction ID if successful, empty string if failed     - <code>status</code> (bool): True if the transaction was successful, False otherwise     - <code>error</code> (str, optional): Error message if the transaction failed</p>"},{"location":"reference/#types","title":"Types","text":""},{"location":"reference/#pool","title":"Pool","text":"<p>A class representing a liquidity pool in the DipCoin Protocol.</p> <p>Attributes: - <code>bal_x</code> (Decimal): The balance of the first token in the pool - <code>bal_y</code> (Decimal): The balance of the second token in the pool - <code>lp_supply</code> (Decimal): The total supply of LP tokens - <code>fee</code> (Decimal): The pool's fee rate</p> <p>Methods: - <code>from_gql_response(cls, response)</code>: Create a Pool instance from a GraphQL response</p>"},{"location":"reference/#constants","title":"Constants","text":"<ul> <li><code>DEFAULT_SLIPPAGE</code>: The default slippage tolerance (0.5%)</li> <li><code>CONTRACT_CONSTANTS</code>: A dictionary containing contract addresses and IDs for different networks</li> </ul>"},{"location":"tutorials/","title":"Tutorials","text":"<p>This guide provides step-by-step tutorials for common use cases with the DipCoin SDK.</p>"},{"location":"tutorials/#working-with-liquidity-pools","title":"Working with Liquidity Pools","text":""},{"location":"tutorials/#finding-a-pool","title":"Finding a Pool","text":"<p>Before interacting with a pool, you'll need to find its ID. Here's how to do it:</p> <pre><code>from dipcoin import DipcoinClient\n\nasync def find_pool():\n    client = DipcoinClient()\n\n    # Define the token types you want to trade\n    coin_x_type = \"0x2::sui::SUI\"\n    coin_y_type = \"0x2::usdc::USDC\"\n\n    # Get the pool ID\n    pool_id = await client.get_pool_id(coin_x_type, coin_y_type)\n\n    if pool_id:\n        print(f\"Found pool: {pool_id}\")\n    else:\n        print(\"No pool found for this pair\")\n</code></pre>"},{"location":"tutorials/#adding-liquidity","title":"Adding Liquidity","text":"<p>Adding liquidity to a pool is a common operation. Here's how to do it:</p> <pre><code>from dipcoin import DipcoinClient\n\nasync def add_liquidity_example():\n    client = DipcoinClient()\n\n    # Pool parameters\n    pool_id = \"your_pool_id\"\n    coin_x_type = \"0x2::sui::SUI\"\n    coin_y_type = \"0x2::usdc::USDC\"\n\n    # Amounts to add (in smallest units)\n    coin_x_amount = 1000000000  # 1 SUI\n    coin_y_amount = 1000000     # 1 USDC\n\n    # Add liquidity with 0.5% slippage tolerance\n    result = await client.add_liquidity(\n        pool_id=pool_id,\n        coin_x_type=coin_x_type,\n        coin_y_type=coin_y_type,\n        coin_x_amount=coin_x_amount,\n        coin_y_amount=coin_y_amount,\n        slippage=0.005\n    )\n\n    if result[\"status\"]:\n        print(f\"Successfully added liquidity! Transaction ID: {result['tx_id']}\")\n    else:\n        print(f\"Failed to add liquidity: {result.get('error')}\")\n</code></pre>"},{"location":"tutorials/#removing-liquidity","title":"Removing Liquidity","text":"<p>To remove liquidity from a pool:</p> <pre><code>from dipcoin import DipcoinClient\n\nasync def remove_liquidity_example():\n    client = DipcoinClient()\n\n    # Pool parameters\n    pool_id = \"your_pool_id\"\n    coin_x_type = \"0x2::sui::SUI\"\n    coin_y_type = \"0x2::usdc::USDC\"\n\n    # Amount of LP tokens to remove\n    lp_amount = 1000000\n\n    # Remove liquidity\n    result = await client.remove_liquidity(\n        pool_id=pool_id,\n        coin_x_type=coin_x_type,\n        coin_y_type=coin_y_type,\n        lp_amount=lp_amount\n    )\n\n    if result[\"status\"]:\n        print(f\"Successfully removed liquidity! Transaction ID: {result['tx_id']}\")\n    else:\n        print(f\"Failed to remove liquidity: {result.get('error')}\")\n</code></pre>"},{"location":"tutorials/#performing-swaps","title":"Performing Swaps","text":""},{"location":"tutorials/#exact-input-swap","title":"Exact Input Swap","text":"<p>When you know exactly how much of the input token you want to spend:</p> <pre><code>from dipcoin import DipcoinClient\n\nasync def exact_input_swap():\n    client = DipcoinClient()\n\n    # Pool parameters\n    pool_id = \"your_pool_id\"\n    coin_in_type = \"0x2::sui::SUI\"\n    coin_out_type = \"0x2::usdc::USDC\"\n\n    # Amount of input token to spend\n    amount_in = 1000000000  # 1 SUI\n\n    # Perform the swap with 0.5% slippage tolerance\n    result = await client.swap_exact_in(\n        pool_id=pool_id,\n        coin_in_type=coin_in_type,\n        coin_out_type=coin_out_type,\n        amount_in=amount_in,\n        slippage=0.005\n    )\n\n    if result[\"status\"]:\n        print(f\"Swap successful! Transaction ID: {result['tx_id']}\")\n    else:\n        print(f\"Swap failed: {result.get('error')}\")\n</code></pre>"},{"location":"tutorials/#exact-output-swap","title":"Exact Output Swap","text":"<p>When you know exactly how much of the output token you want to receive:</p> <pre><code>from dipcoin import DipcoinClient\n\nasync def exact_output_swap():\n    client = DipcoinClient()\n\n    # Pool parameters\n    pool_id = \"your_pool_id\"\n    coin_in_type = \"0x2::sui::SUI\"\n    coin_out_type = \"0x2::usdc::USDC\"\n\n    # Amount of output token to receive\n    amount_out = 1000000  # 1 USDC\n\n    # Perform the swap with 0.5% slippage tolerance\n    result = await client.swap_exact_out(\n        pool_id=pool_id,\n        coin_in_type=coin_in_type,\n        coin_out_type=coin_out_type,\n        amount_out=amount_out,\n        slippage=0.005\n    )\n\n    if result[\"status\"]:\n        print(f\"Swap successful! Transaction ID: {result['tx_id']}\")\n    else:\n        print(f\"Swap failed: {result.get('error')}\")\n</code></pre>"},{"location":"tutorials/#error-handling","title":"Error Handling","text":"<p>The SDK provides detailed error information when operations fail. Here's how to handle errors properly:</p> <pre><code>from dipcoin import DipcoinClient\n\nasync def error_handling_example():\n    client = DipcoinClient()\n\n    try:\n        result = await client.add_liquidity(\n            pool_id=\"invalid_pool_id\",\n            coin_x_type=\"0x2::sui::SUI\",\n            coin_y_type=\"0x2::usdc::USDC\",\n            coin_x_amount=1000000000,\n            coin_y_amount=1000000\n        )\n\n        if not result[\"status\"]:\n            print(f\"Operation failed: {result.get('error')}\")\n\n    except Exception as e:\n        print(f\"An unexpected error occurred: {str(e)}\")\n</code></pre>"},{"location":"tutorials/#best-practices","title":"Best Practices","text":"<ol> <li>Always Check Transaction Status: Verify the <code>status</code> field in the result dictionary before proceeding.</li> <li>Use Appropriate Slippage: Set slippage tolerance based on market conditions and your risk tolerance.</li> <li>Handle Errors Gracefully: Implement proper error handling for failed transactions.</li> <li>Use Async/Await: The SDK is built with async/await support for better performance.</li> <li>Test on Testnet: Always test your code on testnet before deploying to mainnet.</li> </ol>"}]}